name: Dev deployment of backend application
on:
  push:
    branches:
      - $default-branch
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: set up node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: check out code
        uses: actions/checkout@v2
      - name: get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: yarn install and test
        run: |
          mv src/common/utils/clientConfig.sample.ts src/common/utils/clientConfig.ts
          yarn install
          yarn test-coverage
        env:
          CI: true
      - name: upload coverage to codecov
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  build:
    needs: test
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: "1"
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=short_sha::$(git rev-parse --short HEAD)
          if [ ${{ github.event.sender.login }} == "wildlifehexagon" ]
          then
            echo ::set-output name=cluster::"erickube"
            echo ::set-output name=docker_path::"docker/eric-dev/Dockerfile"
            echo ::set-output name=docker_tag_prefix::"ericdev"
          elif [ ${{ github.event.sender.login }} == "cybersiddhu" ]
          then
            echo ::set-output name=cluster::"siddkube"
            echo ::set-output name=docker_path::"docker/sidd-dev/Dockerfile"
            echo ::set-output name=docker_tag_prefix::"devsidd"
          else
            exit 1
          fi
      - name: image build and push
        if: ${{ success() }}
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD  }}
          repository: dictybase/${{ github.event.repository.name }}
          add_git_labels: true
          tag_with_sha: true
          tag_with_ref: true
          tags: ${{ steps.vars.outputs.docker_tag_prefix }}-develop-${{ steps.vars.outputs.short_sha }}
          dockerfile: ${{ steps.vars.outputs.docker_path }}
      - name: prepare for deploy
        if: ${{ success() }}
        id: prepare_deploy
        uses: dictybase-docker/prepare-deploy@v1
        with:
          cluster-name: ${{ steps.vars.outputs.cluster }}
          cluster-zone: "us-central1-a"
          namespace: dictybase
          chart-name: ${{ github.event.repository.name }}
          chart-path: charts/${{ github.event.repository.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image-tag: ${{ steps.vars.outputs.docker_tag_prefix }}-develop-${{ steps.vars.outputs.short_sha }}
          ref: ${{ github.ref }}
          artifact: ${{ github.event.repository.name }}
          environment: develop
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: download deployment artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.repository.name }}
      - name: download and setup path for github action binary
        run: |
          mkdir -p github-actions/bin
          curl -L -o github-actions/bin/actions https://github.com/dictybase-docker/github-actions/releases/download/v0.0.2/action_0.0.2_Linux_x86_64
          chmod +x github-actions/bin/actions
          echo "::add-path::$GITHUB_WORKSPACE/github-actions/bin"
      - name: extract information from deployment payload
        id: deploy_info
        run: actions --log-level debug sdp -f deployment.json
      - name: set in_progress deployment status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.repository.name }} ds --state in_progress  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: setup google cloud sdk
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "299.0.0"
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ secrets.SA_KEY }}
          export_default_credentials: true
      - name: set up helm
        uses: azure/setup-helm@v1
        with:
          version: "v2.16.9"
      - name: get gcloud credentials for k8s cluster
        run: gcloud container clusters get-credentials --project ${{ secrets.PROJECT_ID }} --zone ${{ steps.deploy_info.outputs.zone }} ${{ steps.deploy_info.outputs.cluster }}
      - name: deploy chart
        if: ${{ success() }}
        run: actions --log-level debug dc --name ${{ steps.deploy_info.outputs.chart }} --namespace ${{ steps.deploy_info.outputs.namespace }} --image-tag ${{ steps.deploy_info.outputs.image_tag }} --path ${{ steps.deploy_info.outputs.path }}
      - name: set successful deploy status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.repository.name }} ds --state success  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: set unsuccessful deploy status
        if: ${{ failure() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.repository.name }} ds --state error  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
